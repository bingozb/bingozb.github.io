(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{377:function(e,s,n){"use strict";n.r(s);var t=n(3),a=Object(t.a)({},(function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),n("p",[e._v("前阵子做「顺丰大当家」这个项目，部分界面嵌了 H5，做了混合开发。点击原生的按钮跳到了一个 WebView，再点击 H5 里某个按钮又要可以跳回原生界面。由于 H5 的页面已经在公众号正常运营，需要判断当前打开页面的环境，如果是 App，JS 的点击事件改为调用原生。最后我们采用修改 UserAgent 来做标识。")]),e._v(" "),n("h2",{attrs:{id:"useragent"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#useragent"}},[e._v("#")]),e._v(" UserAgent")]),e._v(" "),n("p",[e._v("由于 Android 和 iOS 与原生的交互不同，需要通过 UserAgent 来判断当前设备是苹果还是安卓，所以最好不要完全自定义 UserAgent，而是在默认的 UserAgent 后，拼接上所需要的自定义标识即可。")]),e._v(" "),n("h3",{attrs:{id:"获取useragent"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#获取useragent"}},[e._v("#")]),e._v(" 获取UserAgent")]),e._v(" "),n("p",[e._v("UIWebView 和 WKWebView 与 JS 交互的方法有点区别，UIWebView 是同步的，而 WKWebView 是异步的。")]),e._v(" "),n("h4",{attrs:{id:"uiwebview方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#uiwebview方式"}},[e._v("#")]),e._v(" UIWebView方式")]),e._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('UIWebView *webView = [[UIWebView alloc] initWithFrame:CGRectZero];\nNSString *userAgent = [webView stringByEvaluatingJavaScriptFromString:@"navigator.userAgent"];\nNSLog(@"userAgent :%@", userAgent);\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("h4",{attrs:{id:"wkwebview方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#wkwebview方式"}},[e._v("#")]),e._v(" WKWebView方式")]),e._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('WKWebView *webView = [[WKWebView alloc] initWithFrame:CGRectZero];\n[wkWebView evaluateJavaScript:@"navigator.userAgent" completionHandler:^(id result, NSError *error) {\n    NSLog(@"userAgent :%@", result);\n}];\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("h4",{attrs:{id:"默认useragent"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#默认useragent"}},[e._v("#")]),e._v(" 默认UserAgent")]),e._v(" "),n("p",[e._v("以下是我的 iPhone 6s Plus，iOS 10.3.2 获取到的 UserAgent。")]),e._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_2 like Mac OS X) AppleWebKit/603.2.4 (KHTML, like Gecko) Mobile/14F89\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("无论使用 UIWebView 方式还是 WKWebView 方式，获取到的结果是一样的。也就是说，获取 UserAgent 不区分 webView 是哪个控件哪个内核。")]),e._v(" "),n("h3",{attrs:{id:"修改useragent"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修改useragent"}},[e._v("#")]),e._v(" 修改UserAgent")]),e._v(" "),n("h4",{attrs:{id:"修改全局useragent"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修改全局useragent"}},[e._v("#")]),e._v(" 修改全局UserAgent")]),e._v(" "),n("p",[e._v("如果想要统一自定义 UserAgent 让所有的 webView 访问网页时都生效，可以在 App 启动的时候，修改全局 UserAgent。")]),e._v(" "),n("h5",{attrs:{id:"uiwebview方式-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#uiwebview方式-2"}},[e._v("#")]),e._v(" UIWebView方式")]),e._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('- (void)changeUIWebViewUserAgent\n{\n    UIWebView *webView = [[UIWebView alloc] initWithFrame:CGRectZero];\n    NSString *userAgent = [webView stringByEvaluatingJavaScriptFromString:@"navigator.userAgent"];\n    NSString *newUserAgent = [userAgent stringByAppendingString:@" origin/sfddjapp"];\n    if (DKToken) {\n        newUserAgent = [newUserAgent stringByAppendingString:[NSString stringWithFormat:@" token/%@", DKToken]];\n    }\n    NSDictionary *dictionary = [NSDictionary dictionaryWithObjectsAndKeys:newUserAgent, @"UserAgent", nil];\n    [[NSUserDefaults standardUserDefaults] registerDefaults:dictionary];\n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br")])]),n("ul",[n("li",[n("code",[e._v("userAgent")]),e._v(" 为默认 UserAgent。")]),e._v(" "),n("li",[n("code",[e._v("newUserAgent")]),e._v(" 首先拼接了"),n("code",[e._v("origin/sfddjapp")]),e._v(" ，标识当前是在「顺丰大当家 APP」环境。")]),e._v(" "),n("li",[n("code",[e._v("DKToken")]),e._v(" 这个宏是缓存了用户登录后的 token，如果用户已登录，则再拼接上"),n("code",[e._v("token/{token}")]),e._v("，标识当前访问页面的用户。")])]),e._v(" "),n("h5",{attrs:{id:"wkwebview方式-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#wkwebview方式-2"}},[e._v("#")]),e._v(" WKWebView方式")]),e._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('- (void)changeWKWebViewUserAgent\n{\n    WKWebView *wkWebView = [[WKWebView alloc] initWithFrame:CGRectZero];\n    self.wkWebView = wkWebView;\n    [wkWebView evaluateJavaScript:@"navigator.userAgent" completionHandler:^(id result, NSError *error) {\n        NSString *userAgent = result;\n        NSString *newUserAgent = [userAgent stringByAppendingString:@" origin/sfddjapp"];\n        if (DKToken) {\n            newUserAgent = [newUserAgent stringByAppendingString:[NSString stringWithFormat:@" token/%@", DKToken]];\n        }\n        NSDictionary *dictionary = [NSDictionary dictionaryWithObjectsAndKeys:newUserAgent, @"UserAgent", nil];\n        [[NSUserDefaults standardUserDefaults] registerDefaults:dictionary];\n    }];\n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br")])]),n("p",[e._v("虽然一样可以实现，但我不推荐使用这种方式，因为它是"),n("strong",[e._v("异步")]),e._v("的。也就是必须要先声明个 property，调用 "),n("code",[e._v("self.wkWebView = wkWebView;")]),e._v(" 把 wkWebView 保存起来。否则 block 回调时，这个 wkWebView 对象已经销毁了，回调的参数也都是 nil。")]),e._v(" "),n("h4",{attrs:{id:"修改局部useragent"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修改局部useragent"}},[e._v("#")]),e._v(" 修改局部UserAgent")]),e._v(" "),n("p",[e._v("有时候只有部分页面访问的时候需要改 UserAgent，或者不同页面访问的时候需要修改不同的 UserAgent，这个时候就只能在加载页面前进行修改。")]),e._v(" "),n("h5",{attrs:{id:"uiwebview方式-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#uiwebview方式-3"}},[e._v("#")]),e._v(" UIWebView方式")]),e._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('/** 修改UIWebView的UserAgent */\n- (void)changeUIWebViewUserAgent\n{\n    self.webView = [[UIWebView alloc] initWithFrame:self.view.bounds];\n    [self.view addSubview:self.webView];\n    \n    [self changeUIWebViewUserAgent];\n    \n    [self.webView loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:@"http://www.whoishostingthis.com/tools/user-agent/"]]];\n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br")])]),n("p",[n("code",[e._v("- changeUIWebViewUserAgent")]),e._v(" 方法就是上面修改全局 UserAgent 的方法，切记要在 "),n("code",[e._v("- loadRequest:")]),e._v(" 之前调用。")]),e._v(" "),n("p",[e._v("注意，有时候把方法的调用写在 "),n("code",[e._v("- loadRequest:")]),e._v(" 下面也没问题。这只是偶然，因为加载页面也是异步的，有时候会有延迟，实际上改 UserAgent 的代码执行完了才加载完页面。如果网速极端好的情况，就会出现 UserAgent 设置无效的问题。")]),e._v(" "),n("p",[e._v("还要注意，"),n("strong",[e._v("获取并修改 userAgent 的 webView 对象，跟加载网页的 webView 不能是同一个对象")]),e._v("。")]),e._v(" "),n("p",[e._v("我调用 "),n("code",[e._v("- changeUIWebViewUserAgent")]),e._v(" 在方法内部重新初始化了一个 webView 对象去获取并修改 userAgent ，而 "),n("code",[e._v("self.webView")]),e._v(" 则负责加载网页，两者不是同一个对象。否则，就会出现第一次设置 UserAgent 会无效的问题。")]),e._v(" "),n("h5",{attrs:{id:"wkwebview方式-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#wkwebview方式-3"}},[e._v("#")]),e._v(" WKWebView方式")]),e._v(" "),n("p",[n("strong",[e._v("UIWebView修改+WKWebView加载")])]),e._v(" "),n("p",[e._v("建议使用 UIWebView 的方式修改 UserAgent 后，再使用 WKWebView 加载网页，这样就很简单，使用起来跟 UIWebView 一样。")]),e._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('/** 修改WKWebView的UserAgent */\n- (void)changeWKWebViewUserAgent\n{\n    self.wkWebView = [[WKWebView alloc] initWithFrame:self.view.bounds];\n    [self.view addSubview:self.wkWebView];\n    \n    [self changeUIWebViewUserAgent];\n    \n    [self.wkWebView loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:@"http://www.whoishostingthis.com/tools/user-agent/"]]];\n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br")])]),n("p",[n("strong",[e._v("纯WKWebView修改+加载")])]),e._v(" "),n("p",[e._v("当然也可以用纯 WKWebView 的方式，如果你真的如此执着 WebKit 的话。")]),e._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('/** 修改WKWebView的UserAgent */\n- (void)changeWKWebViewUserAgent\n{\n    WKWebView *wkWebView = [[WKWebView alloc] initWithFrame:CGRectZero];\n    self.wkWebView = wkWebView;\n    \n    __weak typeof(self) weakSelf = self;\n    [wkWebView evaluateJavaScript:@"navigator.userAgent" completionHandler:^(id result, NSError *error) {\n        NSString *userAgent = result;\n        NSString *newUserAgent = [userAgent stringByAppendingString:@" origin/sfddjapp"];\n        NSDictionary *dictionary = [NSDictionary dictionaryWithObjectsAndKeys:newUserAgent, @"UserAgent", nil];\n        [[NSUserDefaults standardUserDefaults] registerDefaults:dictionary];\n        \n        __strong typeof(weakSelf) strongSelf = weakSelf;\n        dispatch_async(dispatch_get_main_queue(), ^{\n            // 重新初始化WKWebView\n            strongSelf.wkWebView = [[WKWebView alloc] initWithFrame:self.view.bounds];\n            [strongSelf.view addSubview:self.wkWebView];\n            [strongSelf.wkWebView loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:@"http://www.whoishostingthis.com/tools/user-agent/"]]];\n        });\n    }];\n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br")])]),n("p",[e._v("这里也一样有坑，调用获取并修改 UserAgent 的 wkWebView 对象和加载页面的 wkWebView 必须是不同的对象，也就是在回调里需要重新初始化 wKWebView。否则就会出现设置 UserAgent 无效的问题，大概也就是网上说的，“要第二次才会显示自定义的值”。")]),e._v(" "),n("p",[n("strong",[e._v("顺带一提，iOS9 出了新的 API")])]),e._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/*! @abstract The custom user agent string or nil if no custom user agent string has been set.\n*/\n@property (nullable, nonatomic, copy) NSString *customUserAgent API_AVAILABLE(macosx(10.11), ios(9.0));\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("p",[e._v("可以直接修改 WKWebView 的 UserAgent。")]),e._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[self.wkWebView setCustomUserAgent:newUserAgent];\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("但还是无视它吧，现在还没到了可以不用适配 iOS8 的时候，用上面的方式就足够了。")]),e._v(" "),n("h2",{attrs:{id:"后话"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#后话"}},[e._v("#")]),e._v(" 后话")]),e._v(" "),n("p",[e._v("总而言之，不管是 UIWebView 还是 WKWebView，获取到的 UserAgent 是一样的。如果要做到最简单最通用，就用 UIWebView 的方式获取并修改 UserAgent。还有注意，修改 UserAgent 之前获取 UserAgent 的 webView 对象，和修改之后调用加载网页的 webView 对象，不能是同一个对象，否则会出现第一次设置无效的问题。")])])}),[],!1,null,null,null);s.default=a.exports}}]);