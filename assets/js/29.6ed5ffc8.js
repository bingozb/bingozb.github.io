(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{360:function(e,a,s){"use strict";s.r(a);var t=s(3),n=Object(t.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"笔记"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#笔记"}},[e._v("#")]),e._v(" 笔记")]),e._v(" "),s("h3",{attrs:{id:"分类中定义的属性名最好添加一个前缀"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分类中定义的属性名最好添加一个前缀"}},[e._v("#")]),e._v(" 分类中定义的属性名最好添加一个前缀")]),e._v(" "),s("p",[e._v("Masonry : mas_xxx")]),e._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[label mas_makeConstraints:^(MASConstraintMaker *make) {\n    make.edges.equalTo(self.view).insets(UIEdgeInsetsMake(20, 20, 20, 20));\n}];\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("SDWebImage : sd_xxx")]),e._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[self.headImgView sd_setImageWithURL:[NSURL URLWithString:DKImgUrl(joinRecord.uphoto)]];\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("比如我们通常写的view的扩展分类，会定义一些"),s("code",[e._v("x")]),e._v("、"),s("code",[e._v("y")]),e._v("、"),s("code",[e._v("width")]),e._v("、"),s("code",[e._v("height")]),e._v("等属性，如果不写上前缀，有可能跟苹果原有的一些属性同名导致冲突，还可能跟其他框架定义的属性同名冲突，比如"),s("code",[e._v("Masonry")]),e._v("里就有"),s("code",[e._v("width")]),e._v("、"),s("code",[e._v("height")]),e._v("等属性名;")]),e._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[label mas_makeConstraints:^(MASConstraintMaker *make) {\n    make.center.equalTo(self.view);\n    make.height.equalTo(@50);\n    make.width.equalTo(@50);\n}];\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("正确姿势:")]),e._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("x >>> dk_x\ny >>> dk_y\nwidth >>> dk_width\nheight >>> dk_height\n...\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("h3",{attrs:{id:"导航栏标题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#导航栏标题"}},[e._v("#")]),e._v(" 导航栏标题")]),e._v(" "),s("p",[e._v("设置导航栏标题应该用 self.navigationItem.title，而不是用 self.title，self.title 是许多操作的结合体操作，除了更改控制器导航栏标题，还会改了底部 tabBarItem 的标题，甚至还可能使 tabBar 里边的 item 的排列顺序发生变化。")]),e._v(" "),s("h3",{attrs:{id:"宏"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#宏"}},[e._v("#")]),e._v(" 宏")]),e._v(" "),s("ul",[s("li",[e._v("定义宏的时候不能是纯小写字母，苹果的做法是全部大写。")]),e._v(" "),s("li",[e._v("定义的宏如果找不到（按Command+鼠标左键出现一个?），可能是定义在了 Build Setting 中，比如 DEBUG 这个宏。")])]),e._v(" "),s("h3",{attrs:{id:"nib文字换行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nib文字换行"}},[e._v("#")]),e._v(" Nib文字换行")]),e._v(" "),s("ul",[s("li",[e._v("在xib或者storyboard中,UILabel、UITextView等控件的文字换行，需要设置Lines为0，然后按 option + 回车 即可换行。")]),e._v(" "),s("li",[e._v("在代码中可以用"),s("code",[e._v("\\n")]),e._v("来换行")])]),e._v(" "),s("h3",{attrs:{id:"autolayout"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#autolayout"}},[e._v("#")]),e._v(" AutoLayout")]),e._v(" "),s("p",[e._v("在xib或者storyboard中做约束时，如果要距离顶部或者底部约束，参照的目标不应该选layout Guide，而要选UIView，否则会出现许多奇怪的问题。")]),e._v(" "),s("h3",{attrs:{id:"iboutlet"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#iboutlet"}},[e._v("#")]),e._v(" IBOutlet")]),e._v(" "),s("p",[e._v("同一个xib中，如果有两个或者多个view，它们的内容几乎一致（只有小部分有差异），那么对于相同的控件可以共用一个暴露在代码中的 IBOutlet，不需要每个控件都拉一条线给一个独有的 IBOutlet。")]),e._v(" "),s("h3",{attrs:{id:"weak-strong"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#weak-strong"}},[e._v("#")]),e._v(" weak & strong")]),e._v(" "),s("p",[e._v("在写 property 的时候，一般控件的策略是weak，但需要懒加载的控件要用strong。")]),e._v(" "),s("h3",{attrs:{id:"dispatch-async"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dispatch-async"}},[e._v("#")]),e._v(" dispatch_async")]),e._v(" "),s("p",[e._v("如果在 tableView 或者 collectionView 的 reloadData 方法后需要立即获取 cell、高度，或者需要做滚动等操作，那么直接在 reloadData 后执行代码是有可能出问题的。reloadData 并不会等待 tableview 更新结束后才返回，而是立即返回，然后去计算cell高度，获取cell等。")]),e._v(" "),s("p",[e._v("如果表格中的数据非常大，在一个 run loop 周期还没执行完，这时需要 tableview 视图数据的操作就会出问题了。apple并没有直接提供 reloadData 的api，想要程序延迟到 reloadData 结束再操作，可以用以下两种方法:")]),e._v(" "),s("h4",{attrs:{id:"方法一"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法一"}},[e._v("#")]),e._v(" 方法一")]),e._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[self.tableView reloadData];\n[self.tableView layoutIfNeeded];\n// 刷新完成\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h4",{attrs:{id:"方法二"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法二"}},[e._v("#")]),e._v(" 方法二")]),e._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[self.tableView reloadData];\ndispatch_async(dispatch_get_main_queue(), ^{\n    // 刷新完成\n});\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("reloadData 会在主队列执行，而 dispatch_get_main_queue 会等待机会，直到主队列空闲才执行。"),s("br")]),e._v(" "),s("p",[e._v("错误姿势: 把 reloadData 放在 dispatch_async(dispatch_get_main_queue(), ^{}); 里面！")]),e._v(" "),s("h3",{attrs:{id:"uicollectionview加载不到xib"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#uicollectionview加载不到xib"}},[e._v("#")]),e._v(" UICollectionView加载不到xib")]),e._v(" "),s("p",[e._v("UICollectionView与UITableView不同，需要在.m文件中重写 initWithFrame 方法，再次加载nib。")]),e._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('- (instancetype)initWithFrame:(CGRect)frame\n{\n    if (self = [super initWithFrame:frame]) {\n        self = [[[NSBundle mainBundle] loadNibNamed:@"XxxCell" owner:nil options:nil] lastObject];\n    }\n    return self;\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("h3",{attrs:{id:"图片压缩"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图片压缩"}},[e._v("#")]),e._v(" 图片压缩")]),e._v(" "),s("p",[e._v("图片的压缩其实是两个概念")]),e._v(" "),s("ul",[s("li",[e._v("“压” 是指文件体积变小，但是像素数不变，长宽尺寸不变，那么质量可能下降；")]),e._v(" "),s("li",[e._v("“缩” 是指文件的尺寸变小，也就是像素数减少，而长宽尺寸变小，文件体积同样会减小。")])]),e._v(" "),s("p",[e._v("对图片只“压”不缩，有时候是达不到我们的需求的。比如图片已经被压得很模糊了但体积还是很大。因此，还要适当地“缩”图片。")]),e._v(" "),s("h4",{attrs:{id:"图片的-压-处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图片的-压-处理"}},[e._v("#")]),e._v(" 图片的“压”处理")]),e._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("NSData *imgData = UIImageJPEGRepresentation(image, 0.5);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("ul",[s("li",[e._v("第一个参数是图片对象。")]),e._v(" "),s("li",[e._v("第二个参数是压的系数，其值范围为0~1。\n压的系数不宜太低，通常是0.3~0.7，过小则会很模糊，甚至可能会出现黑边等。\n压的系数不等于压缩比例，需要慢慢调试到最佳。")])]),e._v(" "),s("p",[e._v("或者")]),e._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("NSData *imgData = UIImagePNGRepresentation(image);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("一般用 UIImagePNGRepresentation 返回的图片比 UIImageJPEGRepresentation 返回的图片更清晰，也就更大。使用 JPEG 的压处理比较可控。")]),e._v(" "),s("h4",{attrs:{id:"图片的-缩-处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图片的-缩-处理"}},[e._v("#")]),e._v(" 图片的“缩”处理")]),e._v(" "),s("ul",[s("li",[e._v("给 UIImage 写一个分类，定义一个类方法来缩图片")])]),e._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("/*\n *  压缩图片至目标尺寸\n *\n *  @param sourceImage 源图片\n *  @param targetWidth 图片最终尺寸的宽\n *\n *  @return 返回按照源图片的宽、高比例压缩至目标宽、高的图片\n */\n+ (UIImage *)compressImage:(UIImage *)sourceImage toTargetWidth:(CGFloat)targetWidth\n{\n    CGSize imageSize = sourceImage.size;\n    CGFloat originWidth = imageSize.width;\n    CGFloat originHeight = imageSize.height;\n    CGFloat targetHeight = (targetWidth / originWidth) * originHeight;\n    \n    UIGraphicsBeginImageContextWithOptions(CGSizeMake(targetWidth, targetHeight), NO, 0.0);\n    [sourceImage drawInRect:CGRectMake(0, 0, targetWidth, targetHeight)];\n    UIImage *scaledImage = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    \n    return scaledImage;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br")])]),s("ul",[s("li",[e._v("把“压”和“缩”都处理后，返回的NSData对象就可以上传到服务器了。")])]),e._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 源图片为upImage，指定压缩后的图片宽度为150，压缩系数为0.8\nNSData *imageData = UIImageJPEGRepresentation([UIImage compressImage:upImage toTargetWidth:150], 0.8);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h3",{attrs:{id:"动态计算cell高度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态计算cell高度"}},[e._v("#")]),e._v(" 动态计算cell高度")]),e._v(" "),s("p",[e._v("动态计算cell的高度，一直贯穿了我的整个iOS开发，从入门的ISA，到正式项目的验房宝，一直到金锄头和一元领宝，下面进入详细报导。")]),e._v(" "),s("hr"),e._v(" "),s("h2",{attrs:{id:"动态计算cell高度-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态计算cell高度-2"}},[e._v("#")]),e._v(" 动态计算cell高度")]),e._v(" "),s("p",[e._v("假设现在有一个DKPersonCell，里面有一个模型DKPerson，要计算DKPerson模型的username(NSString)属性的文本高度。")]),e._v(" "),s("h3",{attrs:{id:"思路1-0-通过字数和字体大小计算文本的高度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#思路1-0-通过字数和字体大小计算文本的高度"}},[e._v("#")]),e._v(" 思路1.0 通过字数和字体大小计算文本的高度")]),e._v(" "),s("h4",{attrs:{id:"给-nsstring-写个分类，返回字符串的大小"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#给-nsstring-写个分类，返回字符串的大小"}},[e._v("#")]),e._v(" 给 NSString 写个分类，返回字符串的大小")]),e._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('/**\n * text:需要计算的文本 // @"bingo"\n * maxSize: 限制大小 // CGSizeMake(MAXFLOAT, MAXFLOAT) 不限制\n * fontSize: 字体大小 // 17\n */\n+ (CGSize)sizeWithText:(NSString *)text maxSize:(CGSize)maxSize fontSize:(CGFloat)fontSize\n{\n    CGSize size = [text boundingRectWithSize:maxSize options:NSStringDrawingUsesLineFragmentOrigin attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:fontSize]} context:nil].size;\n\n    return size;\n}\n\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br")])]),s("h4",{attrs:{id:"在cell的模型的setter方法中计算字符串的高度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在cell的模型的setter方法中计算字符串的高度"}},[e._v("#")]),e._v(" 在cell的模型的setter方法中计算字符串的高度")]),e._v(" "),s("ul",[s("li",[e._v("在tableView的数据源方法cellForRowAtIndexPath:中给cell赋值一个模型对象")])]),e._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    DKPersonCell * cell = [DKPersonCell personCellWithTableView:tableView];\n    // 给cell的模型对象赋值\n    cell.person = self.persons[indexPath.row];\n\n    return cell; \n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("ul",[s("li",[e._v("在 DKPersonCell.h 中定义一个 cellHeight 属性，用来保存cell的高度")])]),e._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("/** cell的高度 */\n@property (nonatomic,assign) CGFloat cellHeight;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("ul",[s("li",[e._v("在 DKPersonCell.m 中重写person的setter方法，计算文本高度")])]),e._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("- (void)setPerson:(DKPerson *)person\n{\n    _person = person;\n    // 参数1:要计算的文本\n    NSString *text = person.username;\n    // 参数2:设置最大限制大小\n    CGFloat limitWidth = [UIScreen mainScreen].bounds.size.width * 0.7;\n    CGFloat limitHeight = MAXFLOAT;\n    CGSize maxSize = CGSizeMake(limitWidth, limitHeight);\n    // 参数3:设置字体大小\n    CGFloat fontSize = 14.0;\n    \n    // 计算文本大小\n    CGSize stringSize = [NSString sizeWithText:text maxSize:maxSize fontSize:fontSize];\n    // 文本的高度即为 stringSize.height\n    \n    // 计算cell的高度\n    // cell的高度要结合实际情况，这里举例的是纯文本情况\n    // 如果是纯文本的cell，cell的高度就是文本的高度，或者再加上顶部和底部的间距;\n    // 如果cell有其它控件，就要先计算高度固定部分的高度，然后再加上文本的高度;\n    self.cellHeight = 20 + stringSize.height;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br")])]),s("h4",{attrs:{id:"在控制器中定义个可变数组，用来保存模型的高度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在控制器中定义个可变数组，用来保存模型的高度"}},[e._v("#")]),e._v(" 在控制器中定义个可变数组，用来保存模型的高度")]),e._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("/** cell高度数组 */\n@property (nonatomic,strong) NSMutableArray *cellHeightArr;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h4",{attrs:{id:"在-cellforrowatindexpath-中把模型的高度保存到高度数组中"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在-cellforrowatindexpath-中把模型的高度保存到高度数组中"}},[e._v("#")]),e._v(" 在 cellForRowAtIndexPath: 中把模型的高度保存到高度数组中")]),e._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    DKPersonCell *cell = [DKPersonCell personCellWithTableView:tableView];\n    cell.person = self.persons[indexPath.row];\n    // 保存模型的高度到高度数组中\n    [self.cellHeightArr addObject:@(cell.cellHeight)];\n    return cell;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("h4",{attrs:{id:"在-heightforrowatindexpath-中返回对应模型的高度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在-heightforrowatindexpath-中返回对应模型的高度"}},[e._v("#")]),e._v(" 在 heightForRowAtIndexPath: 中返回对应模型的高度")]),e._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    if (self.cellHeightArr.count) {\n        return [self.cellHeightArr[indexPath.row] doubleValue];\n    }\n    return 44; // 默认高度\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v("这样就完成了动态计算cell高度的需求，但是这样是有风险的。")]),e._v(" "),s("p",[e._v("因为现在表格的数据源和代理各自对应了一个数组，这两个数组必须实时同步。")]),e._v(" "),s("p",[e._v("如果其中一个数组的元素增加或者减少了，而另外一个数组不变，一旦拽动表格程序就崩溃；如果两个数组在一个"),s("code",[e._v("run loop")]),e._v("周期内没有都更新完毕，程序立马崩溃，或者出现视图刷新时cell的高度不正确的情况。")]),e._v(" "),s("p",[e._v("另外，因为苹果显示文字的时候会有一个换行的算法，根据输入的字符串的类型去智能换行。")]),e._v(" "),s("p",[e._v("比如一行能显示10个汉字,当我输入了8个汉字再开始输入足够多的英文字母的时候，会发现英文的字符串被自动换行到下一行了，而第一行后边还剩下2个汉字的空白区域。那么可以想象如果这种情况出现得比较多，同样的字数和字体大小显示出来的行数要比理论计算得出来的更多。结合这种情况，计算字符串的高度也十分不稳定。")]),e._v(" "),s("h3",{attrs:{id:"思路2-0-获取uilabel显示的高度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#思路2-0-获取uilabel显示的高度"}},[e._v("#")]),e._v(" 思路2.0 获取UILabel显示的高度")]),e._v(" "),s("p",[e._v("思路1.0不足之处主要有两点：")]),e._v(" "),s("ul",[s("li",[e._v("数据源和代理用了两个数组，会导致许多风险，不可控，应该只用一个数组。")]),e._v(" "),s("li",[e._v("计算字符串的高度是理论值，跟实际值有偏差。")])]),e._v(" "),s("h4",{attrs:{id:"在-xib-或者-storyboard-中把-uilabel-连线到-dkperson-h"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在-xib-或者-storyboard-中把-uilabel-连线到-dkperson-h"}},[e._v("#")]),e._v(" 在 xib 或者 storyboard 中把 UILabel 连线到 DKPerson.h")]),e._v(" "),s("ul",[s("li",[e._v("连的是需要显示文本的控件，可以是 UILabel、UITextView 等。")]),e._v(" "),s("li",[e._v("纯代码跳过连线，但要确保.h文件中有暴露控件。")])]),e._v(" "),s("h4",{attrs:{id:"在-dkperson-h-中定义一个返回模型高度的对象方法，并在-dkperson-m-中实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在-dkperson-h-中定义一个返回模型高度的对象方法，并在-dkperson-m-中实现"}},[e._v("#")]),e._v(" 在 DKPerson.h 中定义一个返回模型高度的对象方法，并在 DKPerson.m 中实现")]),e._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("/** 计算cell高度 */\n- (CGFloat)cellHeight\n{\n   // 重新布局子控件\n   [self layoutIfNeeded];\n   \n   // 计算cell的高度\n   // cell的高度仍然要结合实际情况，\n   // 这里简单举例cell高度 = label的底部的y值 + label底部与cell底部的间距\n   CGFloat cellHeight = CGRectGetMaxY(self.label.frame) + 10;\n   return cellHeight;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br")])]),s("h4",{attrs:{id:"在控制器中定义一个dkpersoncell的工具对象，用来保存cell的高度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在控制器中定义一个dkpersoncell的工具对象，用来保存cell的高度"}},[e._v("#")]),e._v(" 在控制器中定义一个DKPersonCell的工具对象，用来保存cell的高度")]),e._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("/** 计算cell高度的工具对象 */\n@property (nonatomic, strong) DKPersonCell *personCellTool;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h4",{attrs:{id:"懒加载personcelltool"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#懒加载personcelltool"}},[e._v("#")]),e._v(" 懒加载personCellTool")]),e._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("- (DKPersonCell *)personCellTool\n{\n    if (!_personCellTool) {\n         _personCellTool = [DKPersonCell personCellWithTableView:self.tableView];\n    }\n    return _chatCellTool;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("h4",{attrs:{id:"在-heightforrowatindexpath-方法中计算cell高度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在-heightforrowatindexpath-方法中计算cell高度"}},[e._v("#")]),e._v(" 在 heightForRowAtIndexPath 方法中计算cell高度")]),e._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    // 给计算cell高度的工具对象赋值模型\n    self.personCellTool.person = self.persons[indexPath.row];\n    // 计算cell高度\n    return [self.personCellTool cellHeight];\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v("这样就可以完美的实现动态计算cell的高度了~")]),e._v(" "),s("p",[e._v("如果您没有成功，请仔细检查代码，并确定label有设置多行显示，还要约束控件的宽度或者设置explicit来限制单行最长长度。")]),e._v(" "),s("h3",{attrs:{id:"其它情景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其它情景"}},[e._v("#")]),e._v(" 其它情景")]),e._v(" "),s("p",[e._v("上面演示的是简单地计算与NSString相关的控件高度，实际开发中可能会遇到别的情况。")]),e._v(" "),s("p",[e._v("比如验房宝中的cell要根据房间数来决定，要计算一行能放多少间房，然后计算一共要放多少行，然后再计算总的房间高度，以此来得出cell的高度。")]),e._v(" "),s("p",[e._v("但2.0思路都是通用的:")]),e._v(" "),s("ul",[s("li",[e._v("cell暴露一个返回cell高度的方法;")]),e._v(" "),s("li",[e._v("在控制器中懒加载一个计算cell高度的工具对象(cell);")]),e._v(" "),s("li",[e._v("在表格的 heightForRowAtIndexPath 给工具对象set一下对应row的模型，然后调用cell返回高度的方法来得到cell的高度。")])]),e._v(" "),s("p",[e._v("唯一不同的就是cell中返回高度的方法实现，具体情况具体分析。")]),e._v(" "),s("hr"),e._v(" "),s("h2",{attrs:{id:"开发中用到的第三方框架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开发中用到的第三方框架"}},[e._v("#")]),e._v(" 开发中用到的第三方框架")]),e._v(" "),s("ul",[s("li",[e._v("网络请求 : AFNetworking")]),e._v(" "),s("li",[e._v("上拉/下拉刷新 : MJRefresh")]),e._v(" "),s("li",[e._v("字典转模型 : MJExtension")]),e._v(" "),s("li",[e._v("图片浏览器 : MJPhotoBrowser")]),e._v(" "),s("li",[e._v("图片加载 : SDWebImage")]),e._v(" "),s("li",[e._v("HUD : SVProgressHUD、MBProgressHUD")]),e._v(" "),s("li",[e._v("数据缓存归档 : YYCache")]),e._v(" "),s("li",[e._v("第三方支付 : Ping++、BeeCloud、Iapppay")]),e._v(" "),s("li",[e._v("第三方登录 : Mob")]),e._v(" "),s("li",[e._v("社交分享 : Mob")]),e._v(" "),s("li",[e._v("键盘处理 : IQKeyboardManager")]),e._v(" "),s("li",[e._v("即时聊天 : EaseMob")]),e._v(" "),s("li",[e._v("录音 : EMCDDeviceManager")])]),e._v(" "),s("h3",{attrs:{id:"第三方框架的坑"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三方框架的坑"}},[e._v("#")]),e._v(" 第三方框架的坑")]),e._v(" "),s("h4",{attrs:{id:"afnetworking"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#afnetworking"}},[e._v("#")]),e._v(" AFNetworking")]),e._v(" "),s("p",[e._v("很常见的一个坑：解析 text/html 格式失败")]),e._v(" "),s("p",[e._v('需要在 AFURLResponseSerialization.m 文件的 init 方法的 acceptableContentTypes 中添加@"text/html"')]),e._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('- (instancetype)init {\n    self = [super init];\n    if (!self) {\n        return nil;\n    }\n    self.acceptableContentTypes = [NSSet setWithObjects: @"application/json", @"text/json", @"text/javascript", @"text/html", nil];\n    return self;\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("h4",{attrs:{id:"iqkeyboardmanager"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#iqkeyboardmanager"}},[e._v("#")]),e._v(" IQKeyboardManager")]),e._v(" "),s("p",[e._v("有导航栏控制器的时候，点击输入框进入编辑状态弹出键盘，导航栏会被顶上去挤出界面。需要在 IQUIView+Hierarchy.m 文件中的 topMostController 方法中，把以下代码段注释掉。")]),e._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//    while (matchController != nil && [controllersHierarchy containsObject:matchController] == NO)\n//    {\n//        do\n//        {\n//            matchController = [matchController nextResponder];\n//            \n//        } while (matchController != nil && [matchController isKindOfClass:[UIViewController class]] == NO);\n//    }\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("如果做了以上修改，可能会有一个 bug，就是 push 后马上给输入框获取焦点，收起键盘后会发现 self.view 向上偏移了64个点，也就是导航栏的高度。")]),e._v(" "),s("p",[e._v("原理是如果不注释这段代码，那么该方法返回的是导航栏控制器，IQKeyBoardManager 会将导航栏控制器的view一起偏移，注释掉后返回的就是 viewController 而不是 NavigationViewController，就不会把导航栏移上去了。")]),e._v(" "),s("p",[e._v("如果真的有刚需进入控制器就进入编辑状态，并且出现了上述的 view 上移的 bug，那 becomeFirstResponder 就不要写在 viewDidLoad 里，应该写在 viewDidAppear 里。")])])}),[],!1,null,null,null);a.default=n.exports}}]);