(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{349:function(t,s,n){"use strict";n.r(s);var a=n(4),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),n("p",[t._v("NSString 这个类，在 OC 中很常见，"),n("code",[t._v("[NSString stringWithFormat:]")]),t._v(" 这个方法我们都很熟悉了。但是也有很常见的一个问题，那就是参数为空的时候会返回"),n("code",[t._v('@"(null)"')]),t._v("。")]),t._v(" "),n("p",[n("strong",[t._v("举个例子")])]),t._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('label.text = [NSString stringWithFormat:@"所在医院 : %@", self.doctor.hospital];\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("p",[t._v("当 doctor.hospital 为 nil 时，显示“所在医院 : (null)”，理所当然 (null) 这样的字眼不应该出现在界面上被用户看见。")]),t._v(" "),n("h2",{attrs:{id:"解决"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解决"}},[t._v("#")]),t._v(" 解决")]),t._v(" "),n("h3",{attrs:{id:"方法一、使用宏"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法一、使用宏"}},[t._v("#")]),t._v(" 方法一、使用宏")]),t._v(" "),n("h4",{attrs:{id:"定义一个宏，写到pch文件中"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定义一个宏，写到pch文件中"}},[t._v("#")]),t._v(" 定义一个宏，写到PCH文件中")]),t._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('#define DKNonnullString(str) ((str && [str isKindOfClass:[NSString class]] && str.length) ? str : @"")\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("h4",{attrs:{id:"可变参数每一个都包上这个宏"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#可变参数每一个都包上这个宏"}},[t._v("#")]),t._v(" 可变参数每一个都包上这个宏")]),t._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('label.text = [NSString stringWithFormat:@"所在医院 : %@", DKNonnullString(self.doctor.hospital)];\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("h4",{attrs:{id:"原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),n("p",[t._v("先判断参数是否为 nil，如果是，就把它替换为空字符串，再进行 format。")]),t._v(" "),n("h4",{attrs:{id:"缺点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),n("p",[t._v("虽然可以实现，但这样子每次调用的时候每个参数都要包一个宏，感觉很麻烦！网上逛了一圈包括 stackoverflow 有人提到都是这样子解决的。程序猿是无法忍受这种重复累赘的，至少我是这样子的，那有没有更酷的办法呢？")]),n("p"),t._v(" "),n("h3",{attrs:{id:"方法二、使用分类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法二、使用分类"}},[t._v("#")]),t._v(" 方法二、使用分类")]),t._v(" "),n("p",[t._v("跳到头文件 NSString.h 中，可以看到与之相关的方法。")]),t._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("+ (instancetype)stringWithFormat:(NSString *)format, ... NS_FORMAT_FUNCTION(1,2);\n- (instancetype)initWithFormat:(NSString *)format, ... NS_FORMAT_FUNCTION(1,2);\n- (instancetype)initWithFormat:(NSString *)format arguments:(va_list)argList NS_FORMAT_FUNCTION(1,0);\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])]),n("p",[n("strong",[t._v("首先需要了解 initWithFormat: 和 stringWithFormat: 的区别")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("initWithFormat:")]),t._v(" "),n("th",[t._v("stringWithFormat:")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("实例方法")]),t._v(" "),n("td",[t._v("类方法")])]),t._v(" "),n("tr",[n("td",[t._v("非autoRelease，MRC下需要手动release")]),t._v(" "),n("td",[t._v("autoRelease，推荐使用")])])])]),t._v(" "),n("p",[t._v("在MRC下这两种方式生成的字符串在内存管理上面有点差异，现在的项目绝大部分都是ARC了，所以两者可以说是没有区别的，也就是两者之间可以互换！这是重点！")]),t._v(" "),n("p",[n("strong",[t._v("再来看看 arguments")])]),t._v(" "),n("p",[t._v("可以看到参数类型是 va_list，这货一看就不像是 OC 的东西，应该是 C 语言或  C++的。网上一搜，果然跟猜想的一样。它的意思是参数列表，除了 va_list，还有 va_start、va_arg、va_end、NS_FORMAT_FUNCTION，都是 C 语言提供的处理变长参数的方法。")]),t._v(" "),n("p",[n("strong",[t._v("结合这两点，给 NSString 添加一个分类，添加 dk_stringWithFormat: 方法。")])]),t._v(" "),n("h4",{attrs:{id:"nsstring-dkextension-h"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nsstring-dkextension-h"}},[t._v("#")]),t._v(" NSString+DKExtension.h")]),t._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('/**\n 格式化字符串，并过滤格式化后的字符串中的(null)\n\n @param format 格式\n @return 格式化后，过滤掉@"(null)"的字符串\n */\n + (instancetype)dk_stringWithFormat:(NSString *)format, ... NS_FORMAT_FUNCTION(1,2);\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br")])]),n("h4",{attrs:{id:"nsstring-dkextension-m"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nsstring-dkextension-m"}},[t._v("#")]),t._v(" NSString+DKExtension.m")]),t._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('+ (instancetype)dk_stringWithFormat:(NSString *)format, ... NS_FORMAT_FUNCTION(1,2)\n{\n    va_list arglist;\n    va_start(arglist, format);\n    NSString *outStr = [[NSString alloc] initWithFormat:format arguments:arglist];\n    va_end(arglist);\n        \n    if ([outStr containsString:@"(null)"])\n        return [outStr stringByReplacingOccurrencesOfString:@"(null)" withString:@""];\n    return outStr;\n}\n    \n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br")])]),n("p",[n("strong",[t._v("参数说明")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("方法")]),t._v(" "),n("th",[t._v("说明")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("NS_FORMAT_FUNCTION(1, 2)")]),t._v(" "),n("td",[t._v("告诉编译器，索引1处的参数是一个格式化字符串，而实际参数从索引2处开始")])]),t._v(" "),n("tr",[n("td",[t._v("va_list")]),t._v(" "),n("td",[t._v("定义一个指向个数可变的参数列表的指针，这个参数列表指针就是 arglist")])]),t._v(" "),n("tr",[n("td",[t._v("va_start")]),t._v(" "),n("td",[t._v("使参数列表指针指向 format，从 format 的下一个元素开始")])]),t._v(" "),n("tr",[n("td",[t._v("va_end")]),t._v(" "),n("td",[t._v("结束，清空 va_list 可变参数列表")])])])]),t._v(" "),n("p",[n("strong",[t._v("调用")])]),t._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('NSString *nilStr = [NSString stringWithFormat:@"过滤前的[nil] -> [%@] ",nil];\nNSLog(@"%@",nilStr);\n\nNSString *nonullStr = [NSString dk_stringWithFormat:@"过滤后的[nil] -> [%@] ",nil];\nNSLog(@"%@",nonullStr);\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])]),n("p",[n("strong",[t._v("打印")])]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("2017-01-05 00:25:19.486 DKExtensionExample[82935:4502309] 过滤前的[nil] -> [(null)] \n2017-01-05 00:25:19.487 DKExtensionExample[82935:4502309] 过滤后的[nil] -> [] \n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br")])]),n("h4",{attrs:{id:"原理-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原理-2"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),n("p",[t._v("添加一个方法，使用 C 语言提供的处理变长参数的方法获取参数列表，调用 initWithFormat:arguments: 方法，把格式化后的字符串在 return 前做过滤处理，把"),n("code",[t._v('@"(null)"')]),t._v("全部替换成"),n("code",[t._v('@""')]),t._v("。")]),t._v(" "),n("h3",{attrs:{id:"头脑风暴"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#头脑风暴"}},[t._v("#")]),t._v(" 头脑风暴")]),t._v(" "),n("p",[t._v("原本我有个想法，是在 NSString 的分类中直接重写 stringWithFormat:，即下面的方法三，原因有两个。")]),t._v(" "),n("ol",[n("li",[t._v("在分类中重写系统的方法，无需引入分类文件，load 完毕就生效。")]),t._v(" "),n("li",[t._v("调用方式不需要改，依然是 "),n("code",[t._v("[NSString stringWithFormat:]")]),t._v("，不用改变习惯。")])]),t._v(" "),n("h3",{attrs:{id:"方法三、在-nsstring-的分类中直接重写-stringwithformat-（不推荐）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法三、在-nsstring-的分类中直接重写-stringwithformat-（不推荐）"}},[t._v("#")]),t._v(" 方法三、在 NSString 的分类中直接重写 stringWithFormat:"),n("em",[t._v("（不推荐）")])]),t._v(" "),n("p",[t._v("NSString+DKExtension.m")]),t._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('/**\n * 重写系统方法，替换返回的字符串中的 (null) 为空字符串\n *  @"(null)" -> @""\n */\n+ (instancetype)stringWithFormat:(NSString *)format, ...\n{\n    va_list arglist; \n    va_start(arglist, format); \n    NSString *outStr = [[NSString alloc] initWithFormat:format arguments:arglist];\n    va_end(arglist); \n \n    if ([outStr containsString:@"(null)"]) \n        return [outStr stringByReplacingOccurrencesOfString:@"(null)" withString:@""];\n    return outStr;\n}\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br")])]),n("p",[t._v("在 Demo 中测试没有问题，但引入到实际项目后发现，在某个很正常的界面就崩溃了。")]),t._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("2017-01-05 21:17:02.087 YouYun[85270:4528882] exceptionString:name:\nNSInvalidArgumentException\nreason:\nAttempt to mutate immutable object with replaceOccurrencesOfString:withString:options:range:\ncallStackSymbols:\n0   CoreFoundation                      0x000000010f58634b __exceptionPreprocess + 171\n1   libobjc.A.dylib                     0x000000010e8b721e objc_exception_throw + 48\n2   CoreFoundation                      0x000000010f5ef265 +[NSException raise:format:] + 197\n3   CoreFoundation                      0x000000010f4ec91b -[__NSCFString replaceOccurrencesOfString:withString:options:range:] + 123\n...\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br")])]),n("p",[t._v("除了我们手动调用这个方法，系统自己也会调用这个方法，而且频率是极高的。分析一下异常信息，无效参数异常，原因应该是系统调用某个方法的时候需要一个参数是可变的字符串 NSMutableString, 而我们重写的方法中的 "),n("code",[t._v("replaceOccurrencesOfString:withString:options:range:")]),t._v(" 返回了一个不可变的 NSString。")]),t._v(" "),n("p",[t._v("知道原因后，稍做修改。")]),t._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('+ (instancetype)stringWithFormat:(NSString *)format, ... NS_FORMAT_FUNCTION(1,2)\n{\n    va_list arglist;\n    va_start(arglist, format);\n    NSMutableString *outStr = [[NSMutableString alloc] initWithFormat:format arguments:arglist];\n    va_end(arglist);\n    \n    if ([outStr containsString:@"(null)"]) \n        return [NSMutableString stringWithString:[outStr stringByReplacingOccurrencesOfString:@"(null)" withString:@""]];\n    return outStr;\n}\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br")])]),n("p",[t._v("然后跟往常一样调用 "),n("code",[t._v("[NSString stringWithFormat:]")]),t._v(" 即可。")]),t._v(" "),n("p",[t._v("也许有人会说，重写了系统的方法，会不会带来其它地方的未知问题。我个人觉得还好吧，虽然重写了 "),n("code",[t._v("stringWithFormat:")]),t._v(' 这个方法把返回的字符串中的 @"(null)" 过滤掉了，但实际上还是调用系统的另一个方法 '),n("code",[t._v("initWithFormat:arguments:")]),t._v("。")]),t._v(" "),n("p",[t._v("思前想后，最终我还是放弃了这个解决方案，为什么？")]),t._v(" "),n("p",[t._v("正如上面所说的，系统自己也会调用这个方法，比如下面几个常见的系统调用 format 后的字符串。")]),t._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("[] -firstOrDefault: (null) success:error:\n\nClearButton_state:0_variant:0(null)\n\n37.000000-12-1-UIExtendedGrayColorSpace 1 1-(null)-{0, 0}-CW-OutlineShadowOFF\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])]),n("p",[t._v('系统这是在干嘛就不管它了，但说不定苹果还对某些返回的含有@"(null)"的字符串进行了一系列处理呢？比如拿到@"(null)"的 Range，或者判断某个参数 format 后是不是为@"(null)"，然后可能做相对应的处理（纯粹猜想）。如果被我们过滤掉了，也许真的会打乱系统的逻辑导致出现一些莫名其妙的 bug。（暂时没遇到过，如果真想这么玩，需要广大 Coder 在不同项目不同环境下进行检验，目前没有这个人力资本）')]),t._v(" "),n("p",[t._v("所以，我还是决定不去重写系统的方法，就给分类加多一个方法，在我们需要的时候去调用。相对于第一种用宏对每一个参数进行判断过滤的方法来说，我是完全可以接受的。")]),t._v(" "),n("h2",{attrs:{id:"补充"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#补充"}},[t._v("#")]),t._v(" 补充")]),t._v(" "),n("p",[t._v("如果是在 MRC 下，再调用 autorelease 方法即可。")]),t._v(" "),n("div",{staticClass:"language-objc line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("NSString *outStr = [[[NSString alloc] initWithFormat:formatStr arguments:arglist] autorelease];\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("h2",{attrs:{id:"后话"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#后话"}},[t._v("#")]),t._v(" 后话")]),t._v(" "),n("p",[t._v("我们整理了开发中常用的分类 "),n("a",{attrs:{href:"https://github.com/bingozb/DKExtension",target:"_blank",rel:"noopener noreferrer"}},[t._v("DKExtension"),n("OutboundLink")],1),t._v("，里面已经包含了上面所说的内容，欢迎导入我们的分类库进行开发。")]),t._v(" "),n("ul",[n("li",[t._v("支持 Cocoapods"),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("pod 'DKExtension.h'\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])])]),t._v(" "),n("li",[t._v("Download or Usage 请移步 GitHub, 如果有什么更好的解决方案或者建议，欢迎 GitHub Issues。")])])])}),[],!1,null,null,null);s.default=r.exports}}]);