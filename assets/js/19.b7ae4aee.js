(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{345:function(s,a,e){"use strict";e.r(a);var n=e(4),t=Object(n.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),e("p",[s._v("终于开始做攻防相关的操作了，我会一边攻一边防，这篇文章先介绍一个简单的代码混淆的防备操作。文章会从为何要加密、加密市场市场现状、加密思路、方法、工具、操作等方面进行阐述，也作为我个人的记录以便日后的回顾。")]),s._v(" "),e("h2",{attrs:{id:"为什么要做混淆加密"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么要做混淆加密"}},[s._v("#")]),s._v(" 为什么要做混淆加密")]),s._v(" "),e("p",[s._v("先说安卓，是一定要做混淆加密的。因为 apk 非常容易反编译，比如用 smail2java，apk 文件反编译过后都会变成 smail 文件，通过这个工具能看到里面的 Java 代码，请注意，看到的是源码！没有混淆的代码一旦经过反编译全部完完全全的展现给别人，知识产权一点保障也没有。如果写了什么敏感信息，也就全部暴露了。而加固后，比如用360加固保后，反编译出来基本什么也看不到了。")]),s._v(" "),e("p",[s._v("再说 iOS，使用 classdump 对原程序进行 dump，可以 dump 出所有源程序的函数所有信息，包括源程序所有函数类型，变量全部泄露。又比如用 IDA 或者 Hopper Disassembler， 虽然不能像安卓一样反编译出源代码，但还是可以看到汇编或者汇编与 OC 运行时的结合体，还是可以比较容易看出方法的具体实现，让攻击者，也就是黑客们了解了程序结构方便逆向，所以也需要做混淆加密。")]),s._v(" "),e("h2",{attrs:{id:"加密市场"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#加密市场"}},[s._v("#")]),s._v(" 加密市场")]),s._v(" "),e("p",[s._v("国内市场上的现状是安卓的加固烂大街，并且免费，比如360加固保。对于安卓来说，自己写混淆加密意义不大，当然基于了解与学习的角度出发，Get 一项新技能完全没毛病。")]),s._v(" "),e("p",[s._v("而 iOS 市场上很少有人做混淆，因为不能像安卓基于平台化的提交应用包，只能使用第三方提供的集成了加密插件的 Xcode，代替官方原版 Xcode 来打包。国内首家做 iOS 加密的爱加密，据我的深度了解购买授权需要八万块，这可是一笔很大的成本。对于安全级别本身就比较高的苹果应用来说，其实不需要再做太多太多的安全防范操作了。自己学会较简单的混淆加密原理与操作，就可以省下一笔钱了。接下来就只说 iOS 的混淆加密。")]),s._v(" "),e("h2",{attrs:{id:"ios-混淆加密"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ios-混淆加密"}},[s._v("#")]),s._v(" iOS 混淆加密")]),s._v(" "),e("h3",{attrs:{id:"混淆思路"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#混淆思路"}},[s._v("#")]),s._v(" 混淆思路")]),s._v(" "),e("ul",[e("li",[s._v("花代码花指令")]),s._v(" "),e("li",[s._v("易读字符替换")])]),s._v(" "),e("p",[s._v("花代码花指令即随意往程序中加入迷惑人的代码指令，但是个人觉得这个方法还是不太好，如果开发阶段加入迷惑人的代码，容易连开发者自己都被迷惑；如果上架前加入迷惑人的代码，以后的版本迭代也会比较恶心，所以个人不推荐用这个方法。")]),s._v(" "),e("p",[s._v("易读字符替换是防止 class-dump 出可读信息的非常有效的办法，例如将方法名混淆。")]),s._v(" "),e("h3",{attrs:{id:"混淆的时机"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#混淆的时机"}},[s._v("#")]),s._v(" 混淆的时机")]),s._v(" "),e("ul",[e("li",[s._v("开发时一直保留清晰可读的程序代码，方便自己。")]),s._v(" "),e("li",[s._v("发布时编译出来的二进制包含乱七八糟的混淆后的程序代码，恶心他人。")])]),s._v(" "),e("p",[s._v("因此，我们可以在 "),e("strong",[s._v("Build Phrase")]),s._v(" 中设定在编译之前进行方法名的字符串替换。")]),s._v(" "),e("h3",{attrs:{id:"混淆的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#混淆的方法"}},[s._v("#")]),s._v(" 混淆的方法")]),s._v(" "),e("p",[s._v("方法名混淆其实就是字符串替换，利用 #define 的方法来完成，可以把混淆结果合并在一个 .h 中，在工程 Prefix.pch 的最前面 #import 这个 .h。不导入也可以编译、导入则实现混淆。")]),s._v(" "),e("p",[s._v("单段的 selector，如 func: ，可以通过 #define func 来实现字符串替换。\n多段的 selector，如 a🅱️c: ，可以通过分别 #define a 、b、c 来实现字符串替换。")]),s._v(" "),e("h3",{attrs:{id:"混淆工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#混淆工具"}},[s._v("#")]),s._v(" 混淆工具")]),s._v(" "),e("p",[s._v("写一个的混淆脚本，主要思路是把敏感方法名集中写在一个名叫 func.list 的文件中，逐一 #define 成随机字符，追加写入 .h。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('#!/usr/bin/env bash\n\nTABLENAME=symbols\nSYMBOL_DB_FILE="symbols"\nSTRING_SYMBOL_FILE="func.list"\nHEAD_FILE="$PROJECT_DIR/$PROJECT_NAME/Classes/Other/DKCodeObscure.h"\nexport LC_CTYPE=C\n\n#维护数据库方便日后作排重\ncreateTable()\n{\n    echo "create table $TABLENAME(src text, des text);" | sqlite3 $SYMBOL_DB_FILE\n}\n\ninsertValue()\n{\n    echo "insert into $TABLENAME values(\'$1\' ,\'$2\');" | sqlite3 $SYMBOL_DB_FILE\n}\n\nquery()\n{\n    echo "select * from $TABLENAME where src=\'$1\';" | sqlite3 $SYMBOL_DB_FILE\n}\n\nramdomString()\n{\n    openssl rand -base64 64 | tr -cd \'a-zA-Z\' |head -c 16\n}\n\nrm -f $SYMBOL_DB_FILE\nrm -f $HEAD_FILE\ncreateTable\n\ntouch $HEAD_FILE\necho \'#ifndef Demo_codeObfuscation_h\n#define Demo_codeObfuscation_h\' >> $HEAD_FILE\necho "//confuse string at `date`" >> $HEAD_FILE\ncat "$STRING_SYMBOL_FILE" | while read -ra line; do\n    if [[ ! -z "$line" ]]; then\n        ramdom=`ramdomString`\n        echo $line $ramdom\n        insertValue $line $ramdom\n        echo "#define $line $ramdom" >> $HEAD_FILE\n    fi\ndone\necho "#endif" >> $HEAD_FILE\n\nsqlite3 $SYMBOL_DB_FILE .dump\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br")])]),e("h3",{attrs:{id:"操作步骤"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#操作步骤"}},[s._v("#")]),s._v(" 操作步骤")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("将混淆脚本 confuse.sh 放到工程目录下")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("mv confuse.sh to/project/path/\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])])]),s._v(" "),e("li",[e("p",[s._v("创建混淆头文件 DKCodeObscure.h")]),s._v(" "),e("p",[s._v("可以直接在 xcode 中新建一个 Header 文件，根据项目架构分层找一个适当的位置放，我把它放在了 "),e("code",[s._v("/Classes/Other/")]),s._v("下，要与 confuse.sh 里的 HEAD_FILE 保持一致。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('HEAD_FILE="$PROJECT_DIR/$PROJECT_NAME/Classes/Other/DKCodeObscure.h"\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])])]),s._v(" "),e("li",[e("p",[s._v("修改 pch，添加混淆头文件")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('#ifdef __OBJC__\n   #import "DKCodeObscure.h"\n#endif\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])])]),s._v(" "),e("li",[e("p",[s._v("配置 Build Phase，添加执行脚本操作")]),s._v(" "),e("p",[s._v("新建一个 Run Script，输入"),e("code",[s._v("$PROJECT_DIR/confuse.sh")])]),s._v(" "),e("p",[e("img",{attrs:{src:"images/blog/17/confuse.png",alt:"confuse.png"}})])]),s._v(" "),e("li",[e("p",[s._v("创建函数名列表 func.list，根据规则写入待混淆的方法名")]),s._v(" "),e("p",[s._v("例如:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/** 获取立即支付前的准备数据 */\n+ (void)fetchPreDataWithProductId:(NSString *)productId quantity:(NSInteger)quantity callback:(void(^)(DKPayPreData *preData, NSError *error))callback;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("可写成：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("fetchPreDataWithProductId\nquantity\ncallback\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("一般情况下，需要混淆加密的方法应该只是一些比较敏感的，比如与支付相关的 API Service 等。当然，如果需要写入混淆的方法名太多了，一个一个写也是很麻烦，后面我会写一个根据规则自动生成所有方法名列表的脚本。")])]),s._v(" "),e("li",[e("p",[s._v("将 func.list 文件放置于与 confuse.sh 脚本同级")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("mv func.list to/project/path/\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ol",{attrs:{start:"6"}},[e("li",[e("p",[s._v("编译查看结果")]),s._v(" "),e("p",[s._v("直接 build，混淆脚本会在编译前运行，进行字符随机替换，并且每次 build 的随机字符不同，如图：")]),s._v(" "),e("p",[e("img",{attrs:{src:"images/blog/17/obscure.png",alt:"obscure.png"}})]),s._v(" "),e("p",[s._v("同时也会将混淆记录写在 DKCodeObscure.h 中")]),s._v(" "),e("p",[e("img",{attrs:{src:"images/blog/17/codeObscure.png",alt:"DKCodeObscure.h"}})])])]),s._v(" "),e("h3",{attrs:{id:"补充"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#补充"}},[s._v("#")]),s._v(" 补充")]),s._v(" "),e("p",[s._v("如果 Build 的时候报了如下一个错误：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Shell Script Invocation Error\n\n/Users/bingo/Library/Developer/Xcode/DerivedData/SF-cprhxwzvzucuawewgvpjhoffdayp/Build/Intermediates/SF.build/Debug-iphoneos/SF.build/Script-D71BDF821E5C99F4003BF126.sh: \nline 2: /Users/bingo/Desktop/iOS/iOS: No such file or directory\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("这是路径有问题，比如包含空格，我的 PROJECT_DIR 是 "),e("code",[s._v("/Users/bingo/Desktop/iOS/iOS\\ Project/SF")]),s._v("，“iOS Project” 中间有空格，但是 Script 不会自动转义，所以要保证路径不能有空格，例如我改成了 “iOS_Project”。（中文路径还没测试，有可能没问题，但我的看法作为一个有逼格的 developer，用中文你还是别 do 了吧。）")]),s._v(" "),e("h2",{attrs:{id:"后话"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#后话"}},[s._v("#")]),s._v(" 后话")]),s._v(" "),e("p",[s._v("至此，一个 iOS 方法名混淆加密就完成了，但还是很简单的，后面会再一步步优化，现在的 ramdomString() 方法每次都是生成随机字符，后面可能会考虑改成 md5 加密，还有写个脚本一键生成 func.list，还考虑将创建文件等操作也改成用脚本来生成等等。")])])}),[],!1,null,null,null);a.default=t.exports}}]);